name: CI/CD for Databricks Bundles

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  # Validate always runs on PRs before merging
  validate:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          pip install wheel
          databricks --version

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: SERVICE_PRINCIPAL
          enable-AzPSSession: false
          environment: azurecloud

      - name: Configure Databricks CLI
        run: |
          source env/dev.txt
          # No --aad-token needed; just set host
          export DATABRICKS_HOST=$DATABRICKS_HOST
          databricks workspace list /

      - name: Validate Databricks Bundle
        run: databricks bundle validate "${TARGET}"

  # Deploy to Dev on main push
  deploy-dev:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          pip install wheel
          databricks --version

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: SERVICE_PRINCIPAL
          enable-AzPSSession: false
          environment: azurecloud

      - name: Install uv
        run: pip install uv
      
      - name: Configure Databricks CLI
        run: |
          source env/dev.txt
          export DATABRICKS_HOST=$DATABRICKS_HOST
          export TARGET=$TARGET

      - name: Deploy to Dev
        run: |
          cd DBX_Template
          databricks bundle deploy --target "${TARGET}"

  # Deploy to UAT after Dev
  deploy-uat:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          pip install wheel
          databricks --version

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: SERVICE_PRINCIPAL
          enable-AzPSSession: false
          environment: azurecloud

      - name: Install uv
        run: pip install uv
      
      - name: Configure Databricks CLI
        run: source env/uat.txt

      - name: Deploy to UAT
        run: |
          cd DBX_Template
          databricks bundle deploy --target "${TARGET}"

  # Deploy to Prod after UAT
  deploy-prod:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: deploy-uat
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Databricks CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sh
          pip install wheel
          databricks --version

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: SERVICE_PRINCIPAL
          enable-AzPSSession: false
          environment: azurecloud

      - name: Install uv
        run: pip install uv
      
      - name: Configure Databricks CLI
        run: |
          source env/prod.txt
          export DATABRICKS_HOST=$DATABRICKS_HOST

      - name: Deploy to Prod
        run: |
          cd DBX_Template
          databricks bundle deploy --target "${TARGET}"
